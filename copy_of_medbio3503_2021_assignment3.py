# -*- coding: utf-8 -*-
"""Copy of medbio3503_2021_Assignment3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gheo-eJTJuOACToHJDRsQ8kbVcQ71mQ6
"""



"""# Assignment 3 - Image Processing with Python 



## Instructions:
For this assignment, you will complete code blocks to answer questions, using the `print()` function to print out your answer where needed, and using plots where requested. 


"""

import numpy as np
import matplotlib.pyplot as plt
import skimage 

img = skimage.data.retina()

print('Retina image is now loaded')

"""### Q1. Getting basic information about images (4 marks)

1. How many rows in this image? **(1 mark)**
2. How many columns in this image? **(1 mark)**
3. How many channels are there in this image? **(1 mark)**
4. What datatype is used for a pixel in each channel? **(1 mark)**
"""

# Fill in this code block to compute the answers, then print them below

print(img.shape)
print(img.dtype)


print('Number of rows:') 
print(1411)

print('Number of columns:') 
print(1411)

print('Number of channels:')
print(3)

print('Datatype:')
print('uint8')

"""### Q2. Visualizing images (8 marks)

1. Use `imshow` to display the color image **(1 mark)**
2. Add a title to the plot **(1 mark)**
3. Use array indexing to extract the individual channels of the image **(2 marks)**
4. Display each channel of the image and add appropriate titles and colorbars for each channel **(4 marks)**
 
 *Note: You don't need to use a `for` loop for this question.*

"""

# 1. Display the color image

plt.figure(4)
plt.imshow(img)

#...

# 2. Add a title
plt.title('Retina')

# 3. Get individual channels

chan1 = img[:,:,0]
chan2 = img[:,:,1]
chan3 = img[:,:,2]

# 4. Display the individual channels


plt.figure(1)
plt.title('Red Channel')
plt.imshow(chan1)
plt.colorbar()

plt.figure(2)
plt.title('Green Channel')
plt.imshow(chan2)
plt.colorbar()

plt.figure(3)
plt.title('Blue Channel')
plt.imshow(chan3)
plt.colorbar()

"""### Q3: Interrogating intensities and histograms (10 marks)

1. Use the resulting arrays from the last section to compute and print the mean intensity of each channel.  **(2 marks)**

2. What is the intensity of the brightest pixel in the red channel? **(1 mark)**

3. What is the intensity of the darkest pixel in the red channel 1? What part of the image does this refer to? **(2 marks)**

4. Use `plt.hist()` to plot a histogram for each channel in the same figure. Use the `color=(R,G,B)` option to set the plot color to correspond to the color represented by each channel. Use the `bins=N` option to set the number of bins to be the total number of possible values the intensities can take. **(5 marks)**


"""

# 1. Compute the mean intensity of each channel:
avg1 = np.sum(chan1) / (1411*1411)
avg2 = np.sum(chan2) / (1411*1411)
avg3 = np.sum(chan3) / (1411*1411)

#.. 
print('average intensity of channel 1')
print(avg1)
print('average intensity of channel 2')
print(avg2)
print('average intensity of channel 3')
print(avg3)
# 2. Intensity of brightest pixel in red channel:
greatest = 0
for i in range(0,1411):
  for j in range(0,1411):
    current = chan1[i,j]
    if current > greatest:
      greatest = current


print('Brightest pixel:')
print(greatest)

# 3. Intensity of darkest pixel in red channel:
least = 255
for i in range(0,1411):
  for j in range(0,1411):
    current = chan1[i,j]
    if current < least:
      least = current

print('Darkest pixel:')
print(least)
print('This intensity relates to the background of the image, where there is no retina')


# 4. Display histograms for each channel:

plt.hist(chan1.flat,color='red',bins=256)

plt.hist(chan2.flat,color='green',bins=256)

plt.hist(chan3.flat,color='blue',bins=256)

"""### Q4: Image processing on the grayscale image (12 marks)

1. Use the `rgb2gray()` function from the scikit-image `color` module to convert the RGB image, `image` to a grayscale image, and call it `gray`. (1 mark)

2. Plot the grayscale image, and add a sensible title and colorbar. You can use the default color scheme.  (1 mark)

3. Plot a histogram of the grayscale image, using a sensible value for number of bins. You can use the default color. (1 mark)

4. Examine the histogram and image visually to determine a grayscale intensity to threshold out the background. Store this value in a variable called `threshold_value`. (1 mark)

5. Create a binary mask, called `retina_mask`, that is `True` in pixels containing the retina, and `False` in pixels containing the background. Use an inequality statement involving `gray` and `threshold_value` to do this. (2 marks) 

6. Use `imshow()` to plot `retina_mask`. You don't need to add a colorbar in this case.  (1 mark)

7. What percentage of the total image is the retina? Use your `retina_mask` to compute this. (3 marks)

8. Plot a histogram of the red channel with the background excluded  (i.e. background pixels should not appear in the histogram). Hint: you can use `retina_mask` and indexing `[]` to do this. (2 marks)


"""

# 1. Convert to grayscale
gray = skimage.color.rgb2gray(img)

# 2. Plot image
plt.figure(1)
plt.imshow(gray)
plt.colorbar()
plt.title('GrayScale Image')

# 3. Plot histogram
plt.figure(2)
plt.hist(gray,bins=5)

# 4. Pick a threshold value

threshold_value = 0.2

# 5. Create binary mask

retina_mask = gray > threshold_value

# 6. Plot binary mask

plt.figure(3)

plt.imshow(retina_mask)
# 7. Compute percentage of retina

percentpixels = (np.sum(retina_mask) / (gray.shape[0] * gray.shape[1])) * 100
print('percentage of retina is:')
print(percentpixels)

#8
plt.figure(4)
no_background = (retina_mask == True)
plt.hist(no_background)

